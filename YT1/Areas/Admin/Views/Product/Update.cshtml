@model YT1.Models.EF.Product

@{
    ViewBag.title = "Cập Nhật Sản Phẩm";
    ViewBag.action = "Update";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="col-12">
    @using (Html.BeginForm("Update", "Product", FormMethod.Post, new { enctype = "multipart/form-data", id = "productForm" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="col-md-12">
                <div class="card">
                    <div class="card-header p-2">
                        <ul class="nav nav-pills">
                            <li class="nav-item"><a class="nav-link active" href="#activity" data-toggle="tab">Thông Tin Chung</a></li>
                            <li class="nav-item"><a class="nav-link" href="#settings" data-toggle="tab">SEO</a></li>
                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content">
                            <div class="active tab-pane" id="activity">
                                <div class="form-group">
                                    <label class="control-label col-md-2">Mã Sản Phẩm</label>
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2">Tên Sản Phẩm</label>
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2">Loại Sản Phẩm</label>
                                    <div class="col-md-10">
                                        @if (ViewBag.ProductCategory != null && ((SelectList)ViewBag.ProductCategory).Any())
                                        {
                                            @Html.DropDownListFor(model => model.ProductCategoryId, (SelectList)ViewBag.ProductCategory, "Chọn danh mục", new { @class = "form-control" })
                                        }
                                        else
                                        {
                                            <select name="ProductCategoryId" class="form-control" disabled>
                                                <option>Không có danh mục</option>
                                            </select>
                                        }
                                        @Html.ValidationMessageFor(model => model.ProductCategoryId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2">Mô Tả</label>
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2">Chi Tiết</label>
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.Detail, new { @class = "form-control", @id = "txtDetail" })
                                        @Html.ValidationMessageFor(model => model.Detail, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-3">
                                        <div class="form-group">
                                            <label class="control-label">Số Lượng</label>
                                            <div>
                                                @Html.TextBoxFor(model => model.Quantity, new { @class = "form-control", @type = "number", @min = "0", @step = "1" })
                                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-3">
                                        <div class="form-group">
                                            <label class="control-label">Giá Gốc</label>
                                            <div>
                                                @Html.TextBoxFor(model => model.OriginPrice, new { @class = "form-control", @type = "text" })
                                                @Html.ValidationMessageFor(model => model.OriginPrice, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-3">
                                        <div class="form-group">
                                            <label class="control-label">Giá Bán</label>
                                            <div>
                                                @Html.TextBoxFor(model => model.Price, new { @class = "form-control", @type = "text" })
                                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-3">
                                        <div class="form-group">
                                            <label class="control-label">Giá Khuyến Mại</label>
                                            <div>
                                                @Html.TextBoxFor(model => model.PriceSale, new { @class = "form-control", @type = "text" })
                                                @Html.ValidationMessageFor(model => model.PriceSale, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-4">
                                        <div class="form-group">
                                            <div class="custom-control custom-switch">
                                                <input type="hidden" name="IsActive" value="false" id="IsActiveHidden" />
                                                <input @(Model.IsActive ? "checked" : "") name="IsActive" value="true" type="checkbox" class="custom-control-input" id="customSwitch1">
                                                <label class="custom-control-label" for="customSwitch1">Hiển Thị</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            <div class="custom-control custom-switch">
                                                <input type="hidden" name="IsHot" value="false" id="IsHotHidden" />
                                                <input @(Model.IsHot ? "checked" : "") name="IsHot" value="true" type="checkbox" class="custom-control-input" id="customSwitch2">
                                                <label class="custom-control-label" for="customSwitch2">Sản Phẩm Hot</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            <div class="custom-control custom-switch">
                                                <input type="hidden" name="IsFeature" value="false" id="IsFeatureHidden" />
                                                <input @(Model.IsFeature ? "checked" : "") name="IsFeature" value="true" type="checkbox" class="custom-control-input" id="customSwitch3">
                                                <label class="custom-control-label" for="customSwitch3">Nổi Bật</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane" id="settings">
                                <div class="form-horizontal">
                                    <div class="form-group row">
                                        <label for="inputName" class="col-sm-2 col-form-label">SeoTitle</label>
                                        <div class="col-sm-10">
                                            @Html.TextBoxFor(model => model.SeoTitle, new { @class = "form-control", @id = "inputName", @placeholder = "SeoTitle" })
                                            @Html.ValidationMessageFor(model => model.SeoTitle, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label for="inputEmail" class="col-sm-2 col-form-label">SeoKeyWord</label>
                                        <div class="col-sm-10">
                                            @Html.TextBoxFor(model => model.SeoKeyWord, new { @class = "form-control", @id = "inputEmail", @placeholder = "SeoKeyWord" })
                                            @Html.ValidationMessageFor(model => model.SeoKeyWord, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label for="inputExperience" class="col-sm-2 col-form-label">SeoDescription</label>
                                        <div class="col-sm-10">
                                            @Html.TextAreaFor(model => model.SeoDescription, new { @class = "form-control", @id = "inputExperience", @placeholder = "SeoDescription" })
                                            @Html.ValidationMessageFor(model => model.SeoDescription, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    @Html.HiddenFor(model => model.CreatedDate)
                                    @Html.HiddenFor(model => model.CreatedBy)
                                    @Html.HiddenFor(model => model.ModifierBy)

                                    <div class="form-group">
                                        <div class="col-md-10">
                                            <input type="hidden" name="ModifierDate" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <div class="offset-sm-2 col-sm-10">
                                            <button type="submit" class="btn btn-danger">Submit</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section childNavBar {
    <a href="~/Admin/Product/Update" class="nav-link">Update Product</a>
}

@section style {
    <style>
        .btn-create {
            margin: 10px 0px;
        }

        .btn_upload {
            margin: 0 0 12px;
        }
    </style>
}

@section script {
    <script>
        $(document).ready(function () {
            // Khởi tạo CKEditor
            CKEDITOR.replace('txtDetail', {
                customConfig: '~/assets/Plugin/ckeditor/ckeditor/config.js',
                extraAllowedContent: 'span',
            });

            // Hàm định dạng số với dấu phân cách hàng nghìn
            function formatNumberInput(input) {
                let value = input.val().replace(/[^0-9]/g, ''); // Chỉ giữ số
                if (value || value === '0') {
                    value = parseInt(value).toLocaleString('en-US'); // Không cần thập phân
                    input.val(value);
                } else {
                    input.val('');
                }
            }

            // Định dạng giá trị ban đầu từ model
            let originPriceInput = $('input[name="OriginPrice"]');
            if (originPriceInput.val()) {
                originPriceInput.val(parseFloat(originPriceInput.val()).toLocaleString('en-US'));
            }
            let priceInput = $('input[name="Price"]');
            if (priceInput.val()) {
                priceInput.val(parseFloat(priceInput.val()).toLocaleString('en-US'));
            }
            let priceSaleInput = $('input[name="PriceSale"]');
            if (priceSaleInput.val()) {
                priceSaleInput.val(parseFloat(priceSaleInput.val()).toLocaleString('en-US'));
            }

            // Định dạng giá trị khi nhập
            $('input[name="OriginPrice"], input[name="Price"], input[name="PriceSale"]').on('input', function () {
                formatNumberInput($(this));
            });

            // Đồng bộ dữ liệu từ CKEditor và xử lý form khi submit
            $('#productForm').submit(function (e) {
                var editorContent = CKEDITOR.instances['txtDetail'].getData();
                $('textarea#txtDetail').val(editorContent);

                // Kiểm tra Quantity
                var quantity = $('input[name="Quantity"]').val();
                if (quantity < 0) {
                    e.preventDefault();
                    alert('Số lượng phải lớn hơn hoặc bằng 0!');
                    return;
                }

                // Kiểm tra OriginPrice
                let originPrice = $('input[name="OriginPrice"]').val().replace(/,/g, '');
                if (!originPrice || originPrice < 1000) {
                    e.preventDefault();
                    alert('Giá gốc phải lớn hơn hoặc bằng 1000!');
                    return;
                }
                $('input[name="OriginPrice"]').val(originPrice);

                // Kiểm tra Price
                let price = $('input[name="Price"]').val().replace(/,/g, '');
                if (!price || price < 1000) {
                    e.preventDefault();
                    alert('Giá bán phải lớn hơn hoặc bằng 1000!');
                    return;
                }
                $('input[name="Price"]').val(price);

                // Kiểm tra PriceSale
                let priceSale = $('input[name="PriceSale"]').val().replace(/,/g, '');
                if (priceSale && priceSale < 0) {
                    e.preventDefault();
                    alert('Giá khuyến mại không được nhỏ hơn 0!');
                    return;
                }
                if (priceSale && parseInt(priceSale) > parseInt(price)) {
                    e.preventDefault();
                    alert('Giá khuyến mại không được lớn hơn giá bán!');
                    return;
                }
                $('input[name="PriceSale"]').val(priceSale || 0);

                // Kiểm tra ProductCategoryId
                let productCategoryId = $('select[name="ProductCategoryId"]').val();
                if (!productCategoryId) {
                    e.preventDefault();
                    alert('Vui lòng chọn danh mục sản phẩm!');
                    return;
                }
            });

            // Xử lý sự kiện xóa dòng khi nhấn nút "Xóa"
            $(document).on('click', '.delete-btn', function (e) {
                e.preventDefault();
                if (confirm('Bạn có chắc muốn xóa không?')) {
                    deleteRow(this);
                }
            });

            // Xử lý khi checkbox thay đổi
            $('#customSwitch1').on('change', function () {
                var isChecked = $(this).is(':checked');
                $('#IsActiveHidden').val(isChecked ? 'true' : 'false');
            });

            $('#customSwitch2').on('change', function () {
                var isChecked = $(this).is(':checked');
                $('#IsHotHidden').val(isChecked ? 'true' : 'false');
            });

            $('#customSwitch3').on('change', function () {
                var isChecked = $(this).is(':checked');
                $('#IsFeatureHidden').val(isChecked ? 'true' : 'false');
            });
        });

        function deleteRow(element) {
            $(element).closest('tr').remove();
            $('#tbHtml tr').each(function (index) {
                $(this).find('td:first').text(index + 1);
                $(this).find('input[type="radio"]').val(index + 1);
                if (index === 0) {
                    $(this).find('input[type="radio"]').prop('checked', true);
                }
            });
            var newIdx = $('#tbHtml tr').length + 1;
            $('#CurrentId').val(newIdx);
        }
    </script>
}